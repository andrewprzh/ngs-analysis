RCARR = [''] * 256
RCARR[ord('A')] = 'T'
RCARR[ord('T')] = 'A'
RCARR[ord('C')] = 'G'
RCARR[ord('G')] = 'C'
RCARR[ord('N')] = 'N'
RCARR[ord('a')] = 't'
RCARR[ord('t')] = 'a'
RCARR[ord('c')] = 'g'
RCARR[ord('g')] = 'c'
RCARR[ord('g')] = 'c'



RCDICT = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G', 'N': 'N'}


def rc_func(c):
    if c == 'A': return 'T'
    elif c == 'T': return 'A'
    elif c == 'C': return 'G'
    elif c == 'G': return 'C'
    return ""


def rev_comp_arr_map(seq):
    return "".join(map(lambda x: RCARR[ord(x)], seq[::-1]))
    
    
def rev_comp_arr_for(seq):
    res = ""
    for i in range(len(seq) - 1, -1, -1):
        res += RCARR[ord(seq[i])]
    return res
    
        
def rev_comp_dict_map(seq):
    return "".join(map(lambda x: RCDICT[x], seq[::-1]))


def rev_comp_dict_for(seq):
    res = ""
    for i in range(len(seq) - 1, -1, -1):
        res += RCDICT[seq[i]]
    return res
        
        
def rev_comp_func_map(seq):
    return "".join(map(rc_func, seq[::-1]))


def rev_comp_func_for(seq):
    res = ""
    for i in range(len(seq) - 1, -1, -1):
        res += rc_func(seq[i])
    return res
        
        

TEST_SEQ = [
"GTGTACTTCGTTCAGTTACCAATTTGGGTGTTTAGCATGGTCATCGCCTACCGTGACAAGAAAGTTGTCGGTGTCTTTGTGTTTCTGTTGGTGCTGATATTGTGGGGGTTTTGAAAATGTCCTCGGCATAAAAGCGCCATTTTAATTTAAGAAAACGGGGAACTATGC", 
"TCAGGATTGGATTTATATGACTGATCAGTTTCCTCTGCTGTTATCGAAAGCAGATATCAAATGGCTGTGGAGGAATGCAGGTGATTGGAGTTGGTCCAAAGGAAGTTGTGAGTTCTGGGAGAGGCAGAAGGAAAGCAGCTGCCATGTTCTGAAGGTTATCAGCACCTG", 
"TTGGTGATAGAAACAGGCACAGAAGGTGTTAGCAGGTTCCTGTTTGTCCTCTCGCACCCCCTCCCTCCTGATGGTGACCTTGTCCCAGGTCTTCTACCAGGCCTTCTACCAGATGCCTTGCTGAGAATTCACAGAGGCCGTAGACCTGAAGAACCAACAACCTTCCAT", 
"AGGCTTTGAGGTCCCACTCCGGCAGCAGGACGTGCTGGCTCCCAGGAATCACTGACATCAAGGCGTGTAAAATAACACAAAGAGGTTTGCAAAGTCCACAGCCCAAGAGGAGCCGGAGCGTCCTGTTTTTACCATCACGCTTCGTTGTTCACGTTGCTTGTGTGTGTA", 
"AAACAGGGTACAATATTTAGAAACGGTGAAAGGAAATGACTGGCCTAAAACTCTTGTGATTCAGTGACTCAAGGATGATTGACACTGTGTAAAAACAGGCACATTAGACCAAGAGATAATTTGAAACCTTATTATTGGGTATTGTTTTTAAAAATTAAACCTATGGAC", 
"ATGAATAAAATGAAAAACTTTATAAGCACAGCTTATTGAACTAAAGGGCCTTAAGACCATCACTTCCAACGGCCTCATTTTACAGGAGAGAAATCTGAGGACCAGGGAAACCAAGTGACTTTTCTGGGGTCACATGGAATGTCAACAGCAGAGCTGTGAAGGCGTTCA", 
"GGTCTGCTAACCTCCCGGCTATGCTCATTCATGGAGAGTGCTTCGAAGAGTGTTTGCAACATTTAGTCACAGTTTATCTTTGGTTCCAATTCCACATTTACTCTATTTTTAATGTGTGTGAAAATGGCCCAGATTCATATGATTTGTTGCAGGTCAAACAGGTATTAG", 
"AAAAACTGCCAAGCTTGCACCGCTTATGTATAGTTATTTGTTGTGTATGTGCAAGTGTTTGTATGTGTGTGAGCACATAAGCATAATCTCTTTACACACACACACACACACCATTCCTACATCAAAAAGCTCTGAAAATTAAACTTTTTCATAAATTTGTGACAAATT"]



for i in range(1000000):
    s = rev_comp_dict_map(TEST_SEQ[i % 8])